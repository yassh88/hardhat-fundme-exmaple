{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport \"./PriceConvert.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract FundMe {\n  using PriceConvert for uint256;\n  uint256 public constant MINIMUM_USD = 50 * 10**18;\n\n  address public immutable owner_a;\n\n  AggregatorV3Interface public immutable priceFeed;\n\n  constructor(address _priceFeed) {\n    owner_a = msg.sender;\n    priceFeed = AggregatorV3Interface(_priceFeed);\n  }\n\n  address[] public funder;\n  mapping(address => uint256) funderMap;\n\n  function fund() public payable {\n    require(\n      msg.value.getConversion(priceFeed) >= 10**18,\n      \"Value should be more then 1 Ether\"\n    );\n    funder.push(msg.sender);\n    funderMap[msg.sender] += msg.value;\n  }\n\n  function withdraw() public onlyOwner {\n    for (uint256 i = 0; i < funder.length; i++) {\n      funderMap[funder[i]] = 0;\n    }\n    funder = new address[](0);\n    // payable(msg.sender).transfer(address(this).balance);\n    bool result = payable(msg.sender).send(address(this).balance);\n    require(result, \"send fail\");\n    (bool resultCal, ) = payable(msg.sender).call{value: address(this).balance}(\n      \"\"\n    );\n    require(resultCal, \"send fail\");\n  }\n\n  modifier onlyOwner() {\n    require(owner_a == msg.sender, \"only owner can withdraw\");\n    _;\n  }\n}\n"
    },
    "contracts/PriceConvert.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvert {\n  function getPrice(AggregatorV3Interface priceFeed)\n    public\n    view\n    returns (uint256)\n  {\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    return uint256(price * 1e10);\n  }\n\n  function getVersion(AggregatorV3Interface priceFeed)\n    public\n    view\n    returns (uint256)\n  {\n    return priceFeed.version();\n  }\n\n  function getConversion(uint256 ethAmout, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    return (ethAmout * getPrice(priceFeed)) / 1e18;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}